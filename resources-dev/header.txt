  (ns opencv4.core
  (:refer-clojure :exclude [min max compare merge sort reduce repeat])
  (:import
    [org.opencv.core MatOfInt MatOfKeyPoint MatOfPoint MatOfPoint2f MatOfRect Point Rect Mat Size Scalar Core CvType Mat MatOfByte]
    [org.opencv.photo Photo]
    [org.opencv.calib3d Calib3d]
    [org.opencv.imgcodecs Imgcodecs]
    [org.opencv.imgproc Imgproc]))

(origami.Origami/init)

; NOT AUTO GENERATED YET

(defrecord InfoM [name class dims channels width height type submatrix])

(defn- info1[debug-name out]
  (->InfoM debug-name
   (.getSimpleName (.getClass out))
   (.dims out)
   (.channels out)
   (int (.-height (.size out)))
   (int (.-width (.size out)))
   (.type out)
   (.isSubmatrix out)))

(defn infos [outs]
  (clojure.pprint/print-table
    (map #(info1 (first %) (second %)) outs)))

(defn info
;  ([out] (info out "mat" false))
;  ([out debug-name] (info out debug-name false))
;  ([out debug-name _]
;  (clojure.pprint/print-table
;    [(info1 out debug-name)])))

(defn imread
  ([string] (Imgcodecs/imread string))
  ([string type] (Imgcodecs/imread string type)))

(defn imwrite[mat string]
  (Imgcodecs/imwrite string mat)
  mat)

(declare put-text)
(declare hconcat)
(declare new-mat)
(declare vconcat)
(declare add)
(declare new-arraylist)

(def new-list new-arraylist)

(defn clone[mat] (.clone mat))

(defn- pr-seq [seq]
   (letfn [(lineify-seq [items]
       (apply str (interpose "\n" items)))]
     (println (lineify-seq seq))))

(defn ->string [ _mat ]
  (-> 
  _mat
  (.dump)
  (clojure.string/replace  #";" "]")
  (clojure.string/replace  #"\n" "[")
  (#(str "[" % "]"))
  (read-string)))

(defn ->bytes [mat]
  (let [bytes (byte-array (* (.total mat) (.channels mat)))]
    (.get mat 0 0 bytes)
    bytes))

(defn dump[ _mat ]
  (-> _mat ->string pr-seq))

(defn merge!
([java_util_list_0] (merge! java_util_list_0 (Mat.)))
([java_util_list_0 output] 
 (Core/merge java_util_list_0 output )
 output))

(defn add!
  [org_opencv_core_mat_0 org_opencv_core_scalar_1]
    (add org_opencv_core_mat_0 org_opencv_core_scalar_1 org_opencv_core_mat_0)
    org_opencv_core_mat_0)

(defn split!
  [org_opencv_core_mat_0]
   (let [java_util_list_1 (new-arraylist)]
     (Core/split org_opencv_core_mat_0 java_util_list_1)
     java_util_list_1))

(defn set-to
  ([mat scalar] (.setTo mat scalar))
  ([mat scalar mask] (.setTo mat scalar mask)))
(defn set-to!
  ([mat scalar] (.setTo mat scalar) mat)
  ([mat scalar mask] (.setTo mat scalar mask) mat))
(defn copy-to
  ([src target] (.copyTo src target))
  ([src target mask] (.copyTo src target mask)))
(defn copy-to![src mask]
  (copy-to src src mask))

(defn submat[src rect] (.submat src rect))
(defn size[src] (.size src))
(defn rows[src] (.rows src))
(defn cols[src] (.cols src))

(defn convert-to
  ([src target a1] (.convertTo src target a1) target)
  ([src target type alpha beta] (.convertTo src target type alpha beta) target))

(defn convert-to!
  ([mat a1 a2 a3]
  (.convertTo mat mat a1 a2 a3) mat)
  ([mat a1 a2]
  (.convertTo mat mat a1 a2) mat)
  ([mat a1]
  (.convertTo mat mat a1) mat))

(defn put-text!
([org_opencv_core_mat_0 java_lang_string_1 org_opencv_core_point_2 int_3 double_4 org_opencv_core_scalar_5 int_6 ]
  (put-text org_opencv_core_mat_0 java_lang_string_1 org_opencv_core_point_2 int_3 double_4 org_opencv_core_scalar_5 int_6 )
  org_opencv_core_mat_0
  )
([org_opencv_core_mat_0 java_lang_string_1 org_opencv_core_point_2 int_3 double_4 org_opencv_core_scalar_5 int_6 int_7 boolean_8 ]
  (put-text org_opencv_core_mat_0 java_lang_string_1 org_opencv_core_point_2 int_3 double_4 org_opencv_core_scalar_5 int_6 int_7 boolean_8)
  org_opencv_core_mat_0)
([org_opencv_core_mat_0 java_lang_string_1 org_opencv_core_point_2 int_3 double_4 org_opencv_core_scalar_5 ]
  (put-text org_opencv_core_mat_0 java_lang_string_1 org_opencv_core_point_2 int_3 double_4 org_opencv_core_scalar_5 )
  org_opencv_core_mat_0))

(defn hconcat! [mats]
  (let [ output (new-mat) ]
  (hconcat mats output)
  output))

(defn vconcat! [mats]
  (let [ output (new-mat) ]
  (vconcat mats output)
  output))


(defn >> [mat b]
  (.put mat 0 0 b) mat)
(defn << [mat]
  (->bytes mat))
;; END OF HEADER